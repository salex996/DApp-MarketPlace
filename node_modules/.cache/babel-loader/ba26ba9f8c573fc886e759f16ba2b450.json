{"ast":null,"code":"import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      yield* [];\n      return;\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({\n        content: value\n      }, normaliseContent));\n      return;\n    }\n\n    if (isBytes(value)) {\n      yield toFileObject({\n        content: peekable\n      }, normaliseContent);\n      return;\n    }\n\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n\nasync function toFileObject(input, normaliseContent) {\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}","map":{"version":3,"names":["errCode","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-multiple.js"],"sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({ content: value }, normaliseContent));\n      return;\n    }\n    if (isBytes(value)) {\n      yield toFileObject({ content: peekable }, normaliseContent);\n      return;\n    }\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}