{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async function (key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = { ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n\n  return set;\n});\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","toUrlSearchParams","createSet","api","set","key","value","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/config/set.js"],"sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n  case 'boolean':\n    return {\n      arg: [\n        key,\n        value.toString()\n      ],\n      bool: true\n    };\n  case 'string':\n    return {\n      arg: [\n        key,\n        value\n      ]\n    };\n  default:\n    return {\n      arg: [\n        key,\n        JSON.stringify(value)\n      ],\n      json: true\n    };\n  }\n};"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;EACxC,MAAMC,GAAG,GAAG,gBAAOC,GAAP,EAAYC,KAAZ,EAAoC;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;;IAC9C,IAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;MAC3B,MAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;IACD;;IACD,MAAMC,MAAM,GAAG,EACb,GAAGF,OADU;MAEb,GAAGG,WAAW,CAACL,GAAD,EAAMC,KAAN;IAFD,CAAf;IAIA,MAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB;MACnCC,MAAM,EAAEN,OAAO,CAACM,MADmB;MAEnCC,YAAY,EAAEb,iBAAiB,CAACQ,MAAD,CAFI;MAGnCM,OAAO,EAAER,OAAO,CAACQ;IAHkB,CAAnB,CAAlB;IAKA,MAAMJ,GAAG,CAACK,IAAJ,EAAN;EACD,CAdD;;EAeA,OAAOZ,GAAP;AACD,CAjBiC,CAA3B;;AAkBP,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;EAClC,QAAQ,OAAOA,KAAf;IACA,KAAK,SAAL;MACE,OAAO;QACLW,GAAG,EAAE,CACHZ,GADG,EAEHC,KAAK,CAACY,QAAN,EAFG,CADA;QAKLC,IAAI,EAAE;MALD,CAAP;;IAOF,KAAK,QAAL;MACE,OAAO;QACLF,GAAG,EAAE,CACHZ,GADG,EAEHC,KAFG;MADA,CAAP;;IAMF;MACE,OAAO;QACLW,GAAG,EAAE,CACHZ,GADG,EAEHe,IAAI,CAACC,SAAL,CAAef,KAAf,CAFG,CADA;QAKLgB,IAAI,EAAE;MALD,CAAP;EAjBF;AAyBD,CA1BD"},"metadata":{},"sourceType":"module"}