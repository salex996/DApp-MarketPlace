{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRmAll = configure(api => {\n  async function* rmAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const {\n      path,\n      recursive\n    } of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${path}`);\n      if (recursive != null) searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: `${path}`,\n          recursive\n        })\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          yield* pin.Pins.map(cid => CID.parse(cid));\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return rmAll;\n});","map":{"version":3,"names":["CID","configure","normaliseInput","toUrlSearchParams","createRmAll","api","rmAll","source","options","path","recursive","searchParams","URLSearchParams","append","set","String","res","post","signal","headers","arg","pin","ndjson","Pins","map","cid","parse"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/pin/rm-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createRmAll = configure(api => {\n  async function* rmAll(source, options = {}) {\n    for await (const {path, recursive} of normaliseInput(source)) {\n      const searchParams = new URLSearchParams(options.searchParams);\n      searchParams.append('arg', `${ path }`);\n      if (recursive != null)\n        searchParams.set('recursive', String(recursive));\n      const res = await api.post('pin/rm', {\n        signal: options.signal,\n        headers: options.headers,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: `${ path }`,\n          recursive\n        })\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          yield* pin.Pins.map(cid => CID.parse(cid));\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return rmAll;\n});"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC1C,gBAAgBC,KAAhB,CAAsBC,MAAtB,EAA4C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC1C,WAAW,MAAM;MAACC,IAAD;MAAOC;IAAP,CAAjB,IAAsCR,cAAc,CAACK,MAAD,CAApD,EAA8D;MAC5D,MAAMI,YAAY,GAAG,IAAIC,eAAJ,CAAoBJ,OAAO,CAACG,YAA5B,CAArB;MACAA,YAAY,CAACE,MAAb,CAAoB,KAApB,EAA4B,GAAGJ,IAAM,EAArC;MACA,IAAIC,SAAS,IAAI,IAAjB,EACEC,YAAY,CAACG,GAAb,CAAiB,WAAjB,EAA8BC,MAAM,CAACL,SAAD,CAApC;MACF,MAAMM,GAAG,GAAG,MAAMX,GAAG,CAACY,IAAJ,CAAS,QAAT,EAAmB;QACnCC,MAAM,EAAEV,OAAO,CAACU,MADmB;QAEnCC,OAAO,EAAEX,OAAO,CAACW,OAFkB;QAGnCR,YAAY,EAAER,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;UAE9BY,GAAG,EAAG,GAAGX,IAAM,EAFe;UAG9BC;QAH8B,CAAD;MAHI,CAAnB,CAAlB;;MASA,WAAW,MAAMW,GAAjB,IAAwBL,GAAG,CAACM,MAAJ,EAAxB,EAAsC;QACpC,IAAID,GAAG,CAACE,IAAR,EAAc;UACZ,OAAOF,GAAG,CAACE,IAAJ,CAASC,GAAT,CAAaC,GAAG,IAAIzB,GAAG,CAAC0B,KAAJ,CAAUD,GAAV,CAApB,CAAP;UACA;QACD;;QACD,MAAMzB,GAAG,CAAC0B,KAAJ,CAAUL,GAAV,CAAN;MACD;IACF;EACF;;EACD,OAAOf,KAAP;AACD,CA1BmC,CAA7B"},"metadata":{},"sourceType":"module"}