{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nconst cid_1 = require(\"multiformats/cid\");\n\nfunction fromSplit(split) {\n  const [protectedHeader, payload, signature] = split;\n  return {\n    payload,\n    signatures: [{\n      protected: protectedHeader,\n      signature\n    }],\n    link: cid_1.CID.decode(utils_1.fromBase64url(payload))\n  };\n}\n\nfunction encodeSignature(signature) {\n  const encoded = {\n    signature: utils_1.fromBase64url(signature.signature)\n  };\n  if (signature.header) encoded.header = signature.header;\n  if (signature.protected) encoded.protected = utils_1.fromBase64url(signature.protected);\n  return encoded;\n}\n\nfunction encode(jws) {\n  const payload = utils_1.fromBase64url(jws.payload);\n\n  try {\n    cid_1.CID.decode(payload);\n  } catch (e) {\n    throw new Error('Not a valid DagJWS');\n  }\n\n  const encodedJws = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature)\n  };\n  return encodedJws;\n}\n\nfunction decodeSignature(encoded) {\n  const sign = {\n    signature: utils_1.toBase64url(encoded.signature)\n  };\n  if (encoded.header) sign.header = encoded.header;\n  if (encoded.protected) sign.protected = utils_1.toBase64url(encoded.protected);\n  return sign;\n}\n\nfunction decode(encoded) {\n  const decoded = {\n    payload: utils_1.toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature)\n  };\n  decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));\n  return decoded;\n}\n\nexports.default = {\n  fromSplit,\n  encode,\n  decode\n};","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AAiCA,SAASA,SAAT,CAAmBC,KAAnB,EAAuC;EACrC,MAAM,CAACC,eAAD,EAAkBC,OAAlB,EAA2BC,SAA3B,IAAwCH,KAA9C;EACA,OAAO;IACLE,OADK;IAELE,UAAU,EAAE,CAAC;MAAEC,SAAS,EAAEJ,eAAb;MAA8BE;IAA9B,CAAD,CAFP;IAGLG,IAAI,EAAEC,UAAIC,MAAJ,CAAWC,sBAAcP,OAAd,CAAX;EAHD,CAAP;AAKD;;AAED,SAASQ,eAAT,CAAyBP,SAAzB,EAAgD;EAC9C,MAAMQ,OAAO,GAAqB;IAChCR,SAAS,EAAEM,sBAAcN,SAAS,CAACA,SAAxB;EADqB,CAAlC;EAGA,IAAIA,SAAS,CAACS,MAAd,EAAsBD,OAAO,CAACC,MAAR,GAAiBT,SAAS,CAACS,MAA3B;EACtB,IAAIT,SAAS,CAACE,SAAd,EAAyBM,OAAO,CAACN,SAAR,GAAoBI,sBAAcN,SAAS,CAACE,SAAxB,CAApB;EACzB,OAAOM,OAAP;AACD;;AAED,SAASE,MAAT,CAAgBC,GAAhB,EAA2B;EACzB,MAAMZ,OAAO,GAAGO,sBAAcK,GAAG,CAACZ,OAAlB,CAAhB;;EACA,IAAI;IACFK,UAAIC,MAAJ,CAAWN,OAAX;EACD,CAFD,CAEE,OAAOa,CAAP,EAAU;IACV,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACD;;EACD,MAAMC,UAAU,GAAe;IAC7Bf,OAD6B;IAE7BE,UAAU,EAAEU,GAAG,CAACV,UAAJ,CAAec,GAAf,CAAmBR,eAAnB;EAFiB,CAA/B;EAIA,OAAOO,UAAP;AACD;;AAED,SAASE,eAAT,CAAyBR,OAAzB,EAAkD;EAChD,MAAMS,IAAI,GAAiB;IACzBjB,SAAS,EAAEM,oBAAYE,OAAO,CAACR,SAApB;EADc,CAA3B;EAGA,IAAIQ,OAAO,CAACC,MAAZ,EAAoBQ,IAAI,CAACR,MAAL,GAAcD,OAAO,CAACC,MAAtB;EACpB,IAAID,OAAO,CAACN,SAAZ,EAAuBe,IAAI,CAACf,SAAL,GAAiBI,oBAAYE,OAAO,CAACN,SAApB,CAAjB;EACvB,OAAOe,IAAP;AACD;;AAED,SAASZ,MAAT,CAAgBG,OAAhB,EAAmC;EACjC,MAAMU,OAAO,GAAW;IACtBnB,OAAO,EAAEO,oBAAYE,OAAO,CAACT,OAApB,CADa;IAEtBE,UAAU,EAAEO,OAAO,CAACP,UAAR,CAAmBc,GAAnB,CAAuBC,eAAvB;EAFU,CAAxB;EAIAE,OAAO,CAACf,IAAR,GAAeC,UAAIC,MAAJ,CAAW,IAAIc,UAAJ,CAAeX,OAAO,CAACT,OAAvB,CAAX,CAAf;EACA,OAAOmB,OAAP;AACD;;AAEDE,kBAAe;EACbxB,SADa;EAEbc,MAFa;EAGbL;AAHa,CAAf","names":["fromSplit","split","protectedHeader","payload","signature","signatures","protected","link","cid_1","decode","utils_1","encodeSignature","encoded","header","encode","jws","e","Error","encodedJws","map","decodeSignature","sign","decoded","Uint8Array","exports"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/dag-jose/src/signing.ts"],"sourcesContent":["import { fromBase64url, toBase64url } from './utils'\nimport { CID } from 'multiformats/cid'\n\ninterface JWSSignature {\n  header?: Record<string, any>\n  protected?: string\n  signature: string\n}\n\nexport interface DagJWS {\n  payload: string\n  signatures: Array<JWSSignature>\n  link?: CID\n}\n\ninterface EncodedSignature {\n  header?: Record<string, any>\n  protected?: Uint8Array\n  signature: Uint8Array\n}\n\nexport interface EncodedJWS {\n  payload: Uint8Array\n  signatures: Array<EncodedSignature>\n}\n\nexport interface PublicKey {\n  id: string\n  type: string\n  controller: string\n  publicKeyHex?: string\n  publicKeyBase64?: string\n}\n\nfunction fromSplit(split: Array<string>): DagJWS {\n  const [protectedHeader, payload, signature] = split\n  return {\n    payload,\n    signatures: [{ protected: protectedHeader, signature }],\n    link: CID.decode(fromBase64url(payload)),\n  }\n}\n\nfunction encodeSignature(signature: JWSSignature): EncodedSignature {\n  const encoded: EncodedSignature = {\n    signature: fromBase64url(signature.signature),\n  }\n  if (signature.header) encoded.header = signature.header\n  if (signature.protected) encoded.protected = fromBase64url(signature.protected)\n  return encoded\n}\n\nfunction encode(jws: DagJWS): EncodedJWS {\n  const payload = fromBase64url(jws.payload)\n  try {\n    CID.decode(payload)\n  } catch (e) {\n    throw new Error('Not a valid DagJWS')\n  }\n  const encodedJws: EncodedJWS = {\n    payload,\n    signatures: jws.signatures.map(encodeSignature),\n  }\n  return encodedJws\n}\n\nfunction decodeSignature(encoded: EncodedSignature): JWSSignature {\n  const sign: JWSSignature = {\n    signature: toBase64url(encoded.signature),\n  }\n  if (encoded.header) sign.header = encoded.header\n  if (encoded.protected) sign.protected = toBase64url(encoded.protected)\n  return sign\n}\n\nfunction decode(encoded: EncodedJWS): DagJWS {\n  const decoded: DagJWS = {\n    payload: toBase64url(encoded.payload),\n    signatures: encoded.signatures.map(decodeSignature),\n  }\n  decoded.link = CID.decode(new Uint8Array(encoded.payload))\n  return decoded\n}\n\nexport default {\n  fromSplit,\n  encode,\n  decode,\n}\n"]},"metadata":{},"sourceType":"script"}