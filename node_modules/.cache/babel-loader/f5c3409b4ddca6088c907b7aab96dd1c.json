{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async function (dagNode) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...(await multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n\n    return put;\n  });\n  return fn(options);\n};","map":{"version":3,"names":["CID","configure","multipartRequest","toUrlSearchParams","abortSignal","createPut","codecs","options","fn","api","put","dagNode","settings","storeCodec","hashAlg","serialized","inputCodec","Uint8Array","Error","getCodec","encode","controller","AbortController","signal","res","post","timeout","searchParams","headers","data","json","parse","Cid"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/dag/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nexport const createPut = (codecs, options) => {\n  const fn = configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        storeCodec: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        ...options\n      };\n      let serialized;\n      if (settings.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        serialized = dagNode;\n      } else {\n        const storeCodec = await codecs.getCodec(settings.storeCodec);\n        serialized = storeCodec.encode(dagNode);\n        settings.inputCodec = settings.storeCodec;\n      }\n      const controller = new AbortController();\n      const signal = abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams(settings),\n        ...await multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;EAC5C,MAAMC,EAAE,GAAGP,SAAS,CAACQ,GAAG,IAAI;IAC1B,MAAMC,GAAG,GAAG,gBAAOC,OAAP,EAAiC;MAAA,IAAjBJ,OAAiB,uEAAP,EAAO;MAC3C,MAAMK,QAAQ,GAAG;QACfC,UAAU,EAAE,UADG;QAEfC,OAAO,EAAE,UAFM;QAGf,GAAGP;MAHY,CAAjB;MAKA,IAAIQ,UAAJ;;MACA,IAAIH,QAAQ,CAACI,UAAb,EAAyB;QACvB,IAAI,EAAEL,OAAO,YAAYM,UAArB,CAAJ,EAAsC;UACpC,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;QACD;;QACDH,UAAU,GAAGJ,OAAb;MACD,CALD,MAKO;QACL,MAAME,UAAU,GAAG,MAAMP,MAAM,CAACa,QAAP,CAAgBP,QAAQ,CAACC,UAAzB,CAAzB;QACAE,UAAU,GAAGF,UAAU,CAACO,MAAX,CAAkBT,OAAlB,CAAb;QACAC,QAAQ,CAACI,UAAT,GAAsBJ,QAAQ,CAACC,UAA/B;MACD;;MACD,MAAMQ,UAAU,GAAG,IAAIC,eAAJ,EAAnB;MACA,MAAMC,MAAM,GAAGnB,WAAW,CAACiB,UAAU,CAACE,MAAZ,EAAoBX,QAAQ,CAACW,MAA7B,CAA1B;MACA,MAAMC,GAAG,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,SAAT,EAAoB;QACpCC,OAAO,EAAEd,QAAQ,CAACc,OADkB;QAEpCH,MAFoC;QAGpCI,YAAY,EAAExB,iBAAiB,CAACS,QAAD,CAHK;QAIpC,IAAG,MAAMV,gBAAgB,CAAC,CAACa,UAAD,CAAD,EAAeM,UAAf,EAA2BT,QAAQ,CAACgB,OAApC,CAAzB;MAJoC,CAApB,CAAlB;MAMA,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;MACA,OAAO9B,GAAG,CAAC+B,KAAJ,CAAUF,IAAI,CAACG,GAAL,CAAS,GAAT,CAAV,CAAP;IACD,CA3BD;;IA4BA,OAAOtB,GAAP;EACD,CA9BmB,CAApB;EA+BA,OAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAjCM"},"metadata":{},"sourceType":"module"}