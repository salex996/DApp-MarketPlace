{"ast":null,"code":"import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  const cid = CID.asCID(input);\n\n  if (cid) {\n    yield toPin({\n      cid\n    });\n    return;\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  }\n\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) return iterator;\n\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    }\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator;\n\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    }\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}","map":{"version":3,"names":["errCode","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-core-utils/esm/src/pins/normalise-input.js"],"sourcesContent":["import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  const cid = CID.asCID(input);\n  if (cid) {\n    yield toPin({ cid });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input });\n    return;\n  }\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for await (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toPin(input) {\n  const path = input.cid || `${ input.path }`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}