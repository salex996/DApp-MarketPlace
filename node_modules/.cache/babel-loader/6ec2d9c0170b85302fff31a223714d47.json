{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\nexport const createImport = configure(api => {\n  async function* dagImport(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body\n    } = await multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({\n        'pin-roots': options.pinRoots\n      })\n    });\n\n    for await (const {\n      Root\n    } of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {\n            '/': Cid\n          },\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n\n  return dagImport;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","abortSignal","multipartRequest","CID","createImport","api","dagImport","source","options","controller","AbortController","signal","headers","body","res","post","searchParams","pinRoots","Root","ndjson","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/dag/import.js"],"sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\nexport const createImport = configure(api => {\n  async function* dagImport(source, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {headers, body} = await multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    });\n    for await (const {Root} of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {'/': Cid},\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n  return dagImport;\n});"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,OAAO,MAAMC,YAAY,GAAGL,SAAS,CAACM,GAAG,IAAI;EAC3C,gBAAgBC,SAAhB,CAA0BC,MAA1B,EAAgD;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC9C,MAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;IACA,MAAMC,MAAM,GAAGV,WAAW,CAACQ,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAA1B;IACA,MAAM;MAACC,OAAD;MAAUC;IAAV,IAAkB,MAAMX,gBAAgB,CAACK,MAAD,EAASE,UAAT,EAAqBD,OAAO,CAACI,OAA7B,CAA9C;IACA,MAAME,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAJ,CAAS,YAAT,EAAuB;MACvCJ,MADuC;MAEvCC,OAFuC;MAGvCC,IAHuC;MAIvCG,YAAY,EAAEhB,iBAAiB,CAAC;QAAE,aAAaQ,OAAO,CAACS;MAAvB,CAAD;IAJQ,CAAvB,CAAlB;;IAMA,WAAW,MAAM;MAACC;IAAD,CAAjB,IAA2BJ,GAAG,CAACK,MAAJ,EAA3B,EAAyC;MACvC,IAAID,IAAI,KAAKE,SAAb,EAAwB;QACtB,MAAM;UACJC,GAAG,EAAE;YAAC,KAAKA;UAAN,CADD;UAEJC;QAFI,IAGFJ,IAHJ;QAIA,MAAM;UACJK,IAAI,EAAE;YACJC,GAAG,EAAErB,GAAG,CAACsB,KAAJ,CAAUJ,GAAV,CADD;YAEJK,WAAW,EAAEJ;UAFT;QADF,CAAN;MAMD;IACF;EACF;;EACD,OAAOhB,SAAP;AACD,CA3BoC,CAA9B"},"metadata":{},"sourceType":"module"}