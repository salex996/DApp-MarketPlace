{"ast":null,"code":"import { CID } from 'multiformats/cid';\nconst pbNodeProperties = ['Data', 'Links'];\nconst pbLinkProperties = ['Hash', 'Name', 'Tsize'];\nconst textEncoder = new TextEncoder();\n\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n\n  return x < y ? -1 : y < x ? 1 : 0;\n}\n\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\n\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link);\n\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n\n    return {\n      Hash\n    };\n  }\n\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  const pbl = {};\n\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash);\n\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${e.message}`);\n    }\n\n    if (cid) {\n      pbl.Hash = cid;\n    }\n  }\n\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n\n  return pbl;\n}\n\nexport function prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = {\n      Data: node\n    };\n  }\n\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  const pbn = {};\n\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n\n  return pbn;\n}\nexport function validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nexport function createNode(data) {\n  let links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nexport function createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}","map":{"version":3,"names":["CID","pbNodeProperties","pbLinkProperties","textEncoder","TextEncoder","linkComparator","a","b","abuf","Name","encode","bbuf","x","length","y","i","len","Math","min","hasOnlyProperties","node","properties","Object","keys","some","p","includes","asLink","link","asCID","Hash","TypeError","Array","isArray","pbl","cid","parse","Uint8Array","decode","e","message","Tsize","prepare","Data","pbn","undefined","Links","map","sort","validate","createNode","data","links","createLink","name","size"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/@ipld/dag-pb/esm/src/util.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nconst pbNodeProperties = [\n  'Data',\n  'Links'\n];\nconst pbLinkProperties = [\n  'Hash',\n  'Name',\n  'Tsize'\n];\nconst textEncoder = new TextEncoder();\nfunction linkComparator(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  const abuf = a.Name ? textEncoder.encode(a.Name) : [];\n  const bbuf = b.Name ? textEncoder.encode(b.Name) : [];\n  let x = abuf.length;\n  let y = bbuf.length;\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (abuf[i] !== bbuf[i]) {\n      x = abuf[i];\n      y = bbuf[i];\n      break;\n    }\n  }\n  return x < y ? -1 : y < x ? 1 : 0;\n}\nfunction hasOnlyProperties(node, properties) {\n  return !Object.keys(node).some(p => !properties.includes(p));\n}\nfunction asLink(link) {\n  if (typeof link.asCID === 'object') {\n    const Hash = CID.asCID(link);\n    if (!Hash) {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n    return { Hash };\n  }\n  if (typeof link !== 'object' || Array.isArray(link)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbl = {};\n  if (link.Hash) {\n    let cid = CID.asCID(link.Hash);\n    try {\n      if (!cid) {\n        if (typeof link.Hash === 'string') {\n          cid = CID.parse(link.Hash);\n        } else if (link.Hash instanceof Uint8Array) {\n          cid = CID.decode(link.Hash);\n        }\n      }\n    } catch (e) {\n      throw new TypeError(`Invalid DAG-PB form: ${ e.message }`);\n    }\n    if (cid) {\n      pbl.Hash = cid;\n    }\n  }\n  if (!pbl.Hash) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (typeof link.Name === 'string') {\n    pbl.Name = link.Name;\n  }\n  if (typeof link.Tsize === 'number') {\n    pbl.Tsize = link.Tsize;\n  }\n  return pbl;\n}\nexport function prepare(node) {\n  if (node instanceof Uint8Array || typeof node === 'string') {\n    node = { Data: node };\n  }\n  if (typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  const pbn = {};\n  if (node.Data !== undefined) {\n    if (typeof node.Data === 'string') {\n      pbn.Data = textEncoder.encode(node.Data);\n    } else if (node.Data instanceof Uint8Array) {\n      pbn.Data = node.Data;\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  }\n  if (node.Links !== undefined) {\n    if (Array.isArray(node.Links)) {\n      pbn.Links = node.Links.map(asLink);\n      pbn.Links.sort(linkComparator);\n    } else {\n      throw new TypeError('Invalid DAG-PB form');\n    }\n  } else {\n    pbn.Links = [];\n  }\n  return pbn;\n}\nexport function validate(node) {\n  if (!node || typeof node !== 'object' || Array.isArray(node)) {\n    throw new TypeError('Invalid DAG-PB form');\n  }\n  if (!hasOnlyProperties(node, pbNodeProperties)) {\n    throw new TypeError('Invalid DAG-PB form (extraneous properties)');\n  }\n  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {\n    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');\n  }\n  if (!Array.isArray(node.Links)) {\n    throw new TypeError('Invalid DAG-PB form (Links must be an array)');\n  }\n  for (let i = 0; i < node.Links.length; i++) {\n    const link = node.Links[i];\n    if (!link || typeof link !== 'object' || Array.isArray(link)) {\n      throw new TypeError('Invalid DAG-PB form (bad link object)');\n    }\n    if (!hasOnlyProperties(link, pbLinkProperties)) {\n      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');\n    }\n    if (!link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');\n    }\n    if (link.Hash.asCID !== link.Hash) {\n      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');\n    }\n    if (link.Name !== undefined && typeof link.Name !== 'string') {\n      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');\n    }\n    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {\n      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');\n    }\n    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {\n      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');\n    }\n  }\n}\nexport function createNode(data, links = []) {\n  return prepare({\n    Data: data,\n    Links: links\n  });\n}\nexport function createLink(name, size, cid) {\n  return asLink({\n    Hash: cid,\n    Name: name,\n    Tsize: size\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}