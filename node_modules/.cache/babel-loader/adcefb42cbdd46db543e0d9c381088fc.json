{"ast":null,"code":"import { Multibases } from 'ipfs-core-utils/multibases';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport { bases, hashes, codecs } from 'multiformats/basics';\nimport { createBitswap } from './bitswap/index.js';\nimport { createBlock } from './block/index.js';\nimport { createBootstrap } from './bootstrap/index.js';\nimport { createConfig } from './config/index.js';\nimport { createDag } from './dag/index.js';\nimport { createDht } from './dht/index.js';\nimport { createDiag } from './diag/index.js';\nimport { createFiles } from './files/index.js';\nimport { createKey } from './key/index.js';\nimport { createLog } from './log/index.js';\nimport { createName } from './name/index.js';\nimport { createObject } from './object/index.js';\nimport { createPin } from './pin/index.js';\nimport { createPubsub } from './pubsub/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createRepo } from './repo/index.js';\nimport { createStats } from './stats/index.js';\nimport { createSwarm } from './swarm/index.js';\nimport { createAdd } from './add.js';\nimport { createAddAll } from './add-all.js';\nimport { createCat } from './cat.js';\nimport { createCommands } from './commands.js';\nimport { createDns } from './dns.js';\nimport { createGetEndpointConfig } from './get-endpoint-config.js';\nimport { createGet } from './get.js';\nimport { createId } from './id.js';\nimport { createIsOnline } from './is-online.js';\nimport { createLs } from './ls.js';\nimport { createMount } from './mount.js';\nimport { createPing } from './ping.js';\nimport { createResolve } from './resolve.js';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createVersion } from './version.js';\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js';\nexport function create() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  const blockCodecs = Object.values(codecs);\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\nexport { CID } from 'multiformats/cid';\nexport { Multiaddr as multiaddr } from 'multiaddr';\nexport { default as urlSource } from 'ipfs-utils/src/files/url-source.js';\nexport const globSource = globSourceImport;","map":{"version":3,"names":["Multibases","Multicodecs","Multihashes","dagPB","dagCBOR","dagJSON","dagJOSE","identity","bases","hashes","codecs","createBitswap","createBlock","createBootstrap","createConfig","createDag","createDht","createDiag","createFiles","createKey","createLog","createName","createObject","createPin","createPubsub","createRefs","createRepo","createStats","createSwarm","createAdd","createAddAll","createCat","createCommands","createDns","createGetEndpointConfig","createGet","createId","createIsOnline","createLs","createMount","createPing","createResolve","createStart","createStop","createVersion","globSourceImport","create","options","id","name","code","encode","decode","multibaseCodecs","Object","values","ipld","forEach","base","push","multibases","loadBase","blockCodecs","concat","codec","multicodecs","loadCodec","multihashHashers","hashers","hasher","multihashes","loadHasher","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","isOnline","key","log","ls","mount","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","CID","Multiaddr","multiaddr","default","urlSource","globSource"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/index.js"],"sourcesContent":["import { Multibases } from 'ipfs-core-utils/multibases';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport {\n  bases,\n  hashes,\n  codecs\n} from 'multiformats/basics';\nimport { createBitswap } from './bitswap/index.js';\nimport { createBlock } from './block/index.js';\nimport { createBootstrap } from './bootstrap/index.js';\nimport { createConfig } from './config/index.js';\nimport { createDag } from './dag/index.js';\nimport { createDht } from './dht/index.js';\nimport { createDiag } from './diag/index.js';\nimport { createFiles } from './files/index.js';\nimport { createKey } from './key/index.js';\nimport { createLog } from './log/index.js';\nimport { createName } from './name/index.js';\nimport { createObject } from './object/index.js';\nimport { createPin } from './pin/index.js';\nimport { createPubsub } from './pubsub/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createRepo } from './repo/index.js';\nimport { createStats } from './stats/index.js';\nimport { createSwarm } from './swarm/index.js';\nimport { createAdd } from './add.js';\nimport { createAddAll } from './add-all.js';\nimport { createCat } from './cat.js';\nimport { createCommands } from './commands.js';\nimport { createDns } from './dns.js';\nimport { createGetEndpointConfig } from './get-endpoint-config.js';\nimport { createGet } from './get.js';\nimport { createId } from './id.js';\nimport { createIsOnline } from './is-online.js';\nimport { createLs } from './ls.js';\nimport { createMount } from './mount.js';\nimport { createPing } from './ping.js';\nimport { createResolve } from './resolve.js';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createVersion } from './version.js';\nimport globSourceImport from 'ipfs-utils/src/files/glob-source.js';\nexport function create(options = {}) {\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  const blockCodecs = Object.values(codecs);\n  [\n    dagPB,\n    dagCBOR,\n    dagJSON,\n    dagJOSE,\n    id\n  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  const client = {\n    add: createAdd(options),\n    addAll: createAddAll(options),\n    bitswap: createBitswap(options),\n    block: createBlock(options),\n    bootstrap: createBootstrap(options),\n    cat: createCat(options),\n    commands: createCommands(options),\n    config: createConfig(options),\n    dag: createDag(multicodecs, options),\n    dht: createDht(options),\n    diag: createDiag(options),\n    dns: createDns(options),\n    files: createFiles(options),\n    get: createGet(options),\n    getEndpointConfig: createGetEndpointConfig(options),\n    id: createId(options),\n    isOnline: createIsOnline(options),\n    key: createKey(options),\n    log: createLog(options),\n    ls: createLs(options),\n    mount: createMount(options),\n    name: createName(options),\n    object: createObject(multicodecs, options),\n    pin: createPin(options),\n    ping: createPing(options),\n    pubsub: createPubsub(options),\n    refs: createRefs(options),\n    repo: createRepo(options),\n    resolve: createResolve(options),\n    start: createStart(options),\n    stats: createStats(options),\n    stop: createStop(options),\n    swarm: createSwarm(options),\n    version: createVersion(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\nexport {\n  CID\n} from 'multiformats/cid';\nexport {\n  Multiaddr as multiaddr\n} from 'multiaddr';\nexport {\n  default as urlSource\n} from 'ipfs-utils/src/files/url-source.js';\nexport const globSource = globSourceImport;"],"mappings":"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"},"metadata":{},"sourceType":"module"}