{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { SendingQuery, PeerResponse, FinalPeer, QueryError, Provider, Value, AddingPeer, DialingPeer } from './response-types.js';\nimport { Multiaddr } from 'multiaddr';\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n        };\n      }),\n      providers: (event.Responses || []).map(_ref2 => {\n        let {\n          ID,\n          Addrs\n        } = _ref2;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n        };\n      })\n    };\n  }\n\n  if (event.Type === FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr))\n      };\n    }\n\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n\n  if (event.Type === Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(_ref3 => {\n        let {\n          ID,\n          Addrs\n        } = _ref3;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n        };\n      })\n    };\n  }\n\n  if (event.Type === Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(_ref4 => {\n      let {\n        ID\n      } = _ref4;\n      return ID;\n    });\n\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n\n  throw new Error('Unknown DHT event type');\n};","map":{"version":3,"names":["fromString","uint8ArrayFromString","SendingQuery","PeerResponse","FinalPeer","QueryError","Provider","Value","AddingPeer","DialingPeer","Multiaddr","mapEvent","event","Type","to","ID","name","type","from","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","providers","peer","length","error","Error","Extra","value","peers"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/dht/map-event.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js';\nimport { Multiaddr } from 'multiaddr';\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ID}) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}