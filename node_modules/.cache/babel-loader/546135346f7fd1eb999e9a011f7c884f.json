{"ast":null,"code":"import debug from 'debug';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { textToUrlSafeRpc, rpcArrayToTextArray, rpcToBytes } from '../lib/http-rpc-wire-format.js';\nconst log = debug('ipfs-http-client:pubsub:subscribe');\nexport const createSubscribe = (options, subsTracker) => {\n  return configure(api => {\n    async function subscribe(topic, handler) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      let done;\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n      const ffWorkaround = setTimeout(() => done(), 1000);\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n\n        if (!response) {\n          return;\n        }\n\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n\n    return subscribe;\n  })(options);\n};\n\nasync function readMessages(response, _ref) {\n  let {\n    onMessage,\n    onEnd,\n    onError\n  } = _ref;\n  onError = onError || log;\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n\n        onMessage({\n          from: msg.from,\n          data: rpcToBytes(msg.data),\n          seqno: rpcToBytes(msg.seqno),\n          topicIDs: rpcArrayToTextArray(msg.topicIDs)\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg);\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true);\n    }\n  } finally {\n    onEnd();\n  }\n}\n\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n\n    case 'abort':\n      return true;\n\n    default:\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"names":["debug","configure","toUrlSearchParams","textToUrlSafeRpc","rpcArrayToTextArray","rpcToBytes","log","createSubscribe","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","msg","ndjson","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"sources":["/home/salex/Blockchain/Bootcamp-repositorio/32-DApp con React - Marketplace de NFTs/node_modules/ipfs-http-client/esm/src/pubsub/subscribe.js"],"sourcesContent":["import debug from 'debug';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport {\n  textToUrlSafeRpc,\n  rpcArrayToTextArray,\n  rpcToBytes\n} from '../lib/http-rpc-wire-format.js';\nconst log = debug('ipfs-http-client:pubsub:subscribe');\nexport const createSubscribe = (options, subsTracker) => {\n  return configure(api => {\n    async function subscribe(topic, handler, options = {}) {\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      let done;\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n      const ffWorkaround = setTimeout(() => done(), 1000);\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n        if (!response) {\n          return;\n        }\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n    return subscribe;\n  })(options);\n};\nasync function readMessages(response, {onMessage, onEnd, onError}) {\n  onError = onError || log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n        onMessage({\n          from: msg.from,\n          data: rpcToBytes(msg.data),\n          seqno: rpcToBytes(msg.seqno),\n          topicIDs: rpcArrayToTextArray(msg.topicIDs)\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${ err.message }`;\n        onError(err, false, msg);\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true);\n    }\n  } finally {\n    onEnd();\n  }\n}\nconst isAbortError = error => {\n  switch (error.type) {\n  case 'aborted':\n    return true;\n  case 'abort':\n    return true;\n  default:\n    return error.name === 'AbortError';\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}